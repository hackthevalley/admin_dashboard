{"version":3,"sources":["contexts/GlobalContext.js","actions/loginActions.js","scenes/Login.js","actions/eventActions.js","scenes/Events.js","util/pick.js","scenes/Applications.js","actions/hackerActions.js","scenes/Hackers.js","scenes/HackerApplication.js","App.js","serviceWorker.js","index.js"],"names":["GlobalContext","React","createContext","withGlobalContext","WrappedComponent","_Component2","_class3","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this2","react_default","a","createElement","Consumer","assign","globalContext","props","Component","login","_x","_x2","_login","_callee","username","password","token","regenerator_default","wrap","_context","prev","next","htv","User","createToken","sent","localStorage","setItem","setAuthenticationToken","abrupt","authenticationToken","authenticated","stop","rehydrateSession","_rehydrateSession","_callee2","_context2","getItem","Graph","query","user","t0","LoginScene","_this","call","onInputChange","e","setState","defineProperty","target","name","asyncToGenerator","mark","reduce","state","t1","history","push","t2","window","alert","message","className","onChange","type","onClick","withRouter","lastEventFetch","fetchEventList","_fetchEventList","data","Date","events","fetchingEvents","console","log","es","showPaginationTop","showPaginationBottom","columns","Header","accessor","id","d","Link","to","concat","_id","pick","arr","checker","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","item","err","return","eventId","match","params","event","applications","lastHackerFetch","fetchHackerList","_fetchHackerList","hackers","fetchingHackers","_this$props$globalCon","_this$props$match$par","applicationId","application","length","first_name","last_name","hackerApplication","app","submitted_at","HackerApplicationScene","hackerId","hacker","Fragment","email_address","description","phone_number","gender","dob","school","github","linkedin","website","src","answers","map","answer","question","response","App","result","Switch","Route","exact","path","component","EventsScene","ApplicationsScene","HackersScene","_Component","_class2","newState","objectSpread","Provider","Boolean","location","hostname","ReactDOM","render","HashRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58266fa7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nconst GlobalContext = React.createContext({});\r\n\r\n/**\r\n * Returns a component with GlobalContext.Provider\r\n * @param WrappedComponent\r\n * @returns {React.Component}\r\n */\r\nexport function withGlobalContextProvider(WrappedComponent) {\r\n    return class extends Component {\r\n\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                authenticationToken: null,\r\n                authenticated: false,\r\n                hackers: [],\r\n                events: [],\r\n                fetchingEvents: false,\r\n                fetchingHackers: false,\r\n                reduce: this.reduce\r\n            };\r\n        }\r\n\r\n        reduce = (newState) => {\r\n            this.setState({\r\n                ...newState\r\n            });\r\n        };\r\n\r\n        render() {\r\n            return (\r\n                <GlobalContext.Provider value={this.state}>\r\n                    <WrappedComponent {...this.props} />\r\n                </GlobalContext.Provider>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a component with globalContext as prop\r\n * @param WrappedComponent\r\n * @returns {React.Component}\r\n */\r\nexport function withGlobalContext(WrappedComponent) {\r\n\r\n    return class extends Component {\r\n        render() {\r\n            return (\r\n                <GlobalContext.Consumer>\r\n                    {value => {\r\n                        return <WrappedComponent globalContext={value} {...this.props} />\r\n                    }}\r\n                </GlobalContext.Consumer>\r\n            )\r\n        }\r\n    }\r\n}","import htv from 'htv-sdk';\r\n\r\nexport async function login(username, password) {\r\n    let token = await htv.User.createToken(username, password);\r\n    localStorage.setItem(\"token\", token);\r\n    htv.setAuthenticationToken(token);\r\n    return {\r\n        authenticationToken: token,\r\n        authenticated: true\r\n    };\r\n}\r\n\r\nexport async function rehydrateSession() {\r\n    let token = localStorage.getItem(\"token\");\r\n    htv.setAuthenticationToken(token);\r\n    if(token) {\r\n        try {\r\n            let data = await htv.Graph.query(`{ user {_id} }`);\r\n            if(data.user) {\r\n                return {\r\n                    authenticationToken: token,\r\n                    authenticated: true\r\n                }\r\n            } else {\r\n                return {authenticated: false};\r\n            }\r\n        } catch (e) {\r\n            return {authenticated: false};\r\n        }\r\n    } else {\r\n        return {authenticated: false};\r\n    }\r\n}","import React, {Component}  from 'react';\r\nimport {login}   from \"../actions/loginActions\";\r\nimport {withGlobalContext} from \"../contexts/GlobalContext\";\r\nimport {withRouter}        from \"react-router-dom\";\r\n\r\nclass LoginScene extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\"\r\n        }\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    };\r\n\r\n    login = async () => {\r\n        const {reduce} = this.props.globalContext;\r\n        try {\r\n            reduce(await login(this.state.username, this.state.password));\r\n            this.props.history.push(\"/events\");\r\n        } catch (e) {\r\n            window.alert(e.message);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"container pt-5\"}>\r\n                <div className={\"row\"}>\r\n                    <div className={\"col-lg-6\"}>\r\n                        <h1>HTV Administration Portal</h1>\r\n                        <h3>Login</h3>\r\n                        <p>\r\n                            Please login using your administrative credentials.\r\n                        </p>\r\n                        <hr/>\r\n                        <label>Username</label>\r\n                        <input\r\n                            onChange={this.onInputChange}\r\n                            value={this.state.username}\r\n                            className={\"form-control\"}\r\n                            type={\"text\"}\r\n                            name={\"username\"}/>\r\n                        <label className={\"pt-1\"}>Password</label>\r\n                        <input\r\n                            onChange={this.onInputChange}\r\n                            value={this.state.password}\r\n                            className={\"form-control\"}\r\n                            type={\"password\"}\r\n                            name={\"password\"}/>\r\n                        <br/>\r\n                        <button\r\n                            onClick={this.login}\r\n                            className={\"btn btn-primary\"}>\r\n                            Login\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(withGlobalContext(LoginScene));","import htv from 'htv-sdk';\r\n\r\nlet lastEventFetch = null;\r\n\r\nexport async function fetchEventList() {\r\n    if(!lastEventFetch) {\r\n        let data = await htv.Graph.query(`\r\n            {\r\n                events {\r\n                    _id\r\n                    name\r\n                    applications {\r\n                        _id\r\n                        name\r\n                        description\r\n                    }\r\n                }\r\n            }\r\n        `);\r\n        lastEventFetch = new Date();\r\n        return {\r\n            events: data.events,\r\n            fetchingEvents: false\r\n        }\r\n    } else {\r\n        console.log(\"Already fetched all events... skipping...\");\r\n        return {\r\n            fetchingEvents: false\r\n        }\r\n    }\r\n}","import React, {Component}  from 'react';\r\nimport {withGlobalContext} from \"../contexts/GlobalContext\";\r\nimport {fetchEventList}    from \"../actions/eventActions\";\r\nimport {Link}              from \"react-router-dom\";\r\nimport ReactTable          from 'react-table'\r\n\r\n\r\nclass EventsScene extends Component {\r\n\r\n    async componentDidMount() {\r\n        const {reduce} = this.props.globalContext;\r\n        reduce({fetchingEvents: true});\r\n        reduce(await fetchEventList());\r\n    }\r\n\r\n    render() {\r\n        const {events} = this.props.globalContext;\r\n        return (\r\n            <div className={\"container-fluid pt-3\"}>\r\n                <h3>Events</h3>\r\n                <ReactTable\r\n                    showPaginationTop={true}\r\n                    showPaginationBottom={false}\r\n                    data={events}\r\n                    columns={[\r\n                        {\r\n                            Header: 'Name',\r\n                            accessor: 'name'\r\n                        },\r\n                        {\r\n                            id: 'actions',\r\n                            Header: 'Actions',\r\n                            accessor: d => {\r\n                                return <Link to={`/events/${d._id}/applications`}>View Applications</Link>\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withGlobalContext(EventsScene);","export default function pick(arr, checker) {\r\n    for(let item of arr) {\r\n        if(checker(item)) {\r\n            return item;\r\n        }\r\n    }\r\n    return null;\r\n}","import React, {Component}  from 'react';\r\nimport {withGlobalContext} from \"../contexts/GlobalContext\";\r\nimport {fetchEventList}    from \"../actions/eventActions\";\r\nimport {Link}              from \"react-router-dom\";\r\nimport pick                from \"../util/pick\";\r\nimport ReactTable          from 'react-table'\r\n\r\n\r\nclass ApplicationsScene extends Component {\r\n\r\n    async componentDidMount() {\r\n        const {reduce} = this.props.globalContext;\r\n        reduce({fetchingEvents: true});\r\n        reduce(await fetchEventList());\r\n    }\r\n\r\n    render() {\r\n        const {events}  = this.props.globalContext;\r\n        const {eventId} = this.props.match.params;\r\n        const event     = pick(events, event => event._id === eventId);\r\n        return (\r\n            <div className={\"container-fluid pt-3\"}>\r\n                <h3>Applications</h3>\r\n                <h4 className={\"text-muted\"}>\r\n                    {(event ? event.name : \"\")}\r\n                </h4>\r\n                <ReactTable\r\n                    showPaginationTop={true}\r\n                    showPaginationBottom={false}\r\n                    data={(event ? event.applications : [])}\r\n                    columns={[\r\n                        {\r\n                            Header: 'Name',\r\n                            accessor: 'name'\r\n                        },\r\n                        {\r\n                            id: 'actions',\r\n                            Header: 'Actions',\r\n                            accessor: d => {\r\n                                return <Link to={`/events/${event._id}/applications/${d._id}/hackers`}>View\r\n                                    Hackers</Link>;\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withGlobalContext(ApplicationsScene);","import htv from 'htv-sdk';\r\n\r\nlet lastHackerFetch = null;\r\n\r\nexport async function fetchHackerList() {\r\n    if (!lastHackerFetch) {\r\n        let data = await htv.Graph.query(`\r\n            {\r\n                hackers {\r\n                    _id\r\n                    email_address\r\n                    first_name\r\n                    last_name\r\n                    school\r\n                    phone_number\r\n                    gender\r\n                    dob\r\n                    github\r\n                    linkedin\r\n                    website\r\n                    description\r\n                    created_at\r\n                    applications {\r\n                        _id\r\n                        submitted_at\r\n                        answers {\r\n                            question {\r\n                                name\r\n                                description\r\n                            }\r\n                            _id\r\n                            answers\r\n                        }\r\n                        application {\r\n                            _id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `);\r\n        lastHackerFetch = new Date();\r\n        return {\r\n            hackers: data.hackers,\r\n            fetchingHackers: false\r\n        }\r\n    } else {\r\n        console.log(\"Already fetched hackers... skipping...\");\r\n        return {\r\n            fetchingHackers: false\r\n        }\r\n    }\r\n}","import React, {Component}  from 'react';\r\nimport {withGlobalContext} from \"../contexts/GlobalContext\";\r\nimport pick                from \"../util/pick\";\r\nimport {fetchHackerList}   from \"../actions/hackerActions\";\r\nimport {fetchEventList}    from \"../actions/eventActions\";\r\nimport {Link}              from \"react-router-dom\";\r\nimport ReactTable          from 'react-table'\r\n\r\nclass HackersScene extends Component {\r\n\r\n    async componentDidMount() {\r\n        const {reduce} = this.props.globalContext;\r\n        reduce({fetchingEvents: true, fetchingHackers: true});\r\n        reduce(await fetchEventList());\r\n        reduce(await fetchHackerList());\r\n    }\r\n\r\n    render() {\r\n        const {events, hackers}        = this.props.globalContext;\r\n        const {eventId, applicationId} = this.props.match.params;\r\n        const event                    = pick(events, event => event._id === eventId);\r\n        const application              = pick(event ? event.applications : [], application => application._id === applicationId);\r\n        return (\r\n            <div className={\"container-fluid pt-3\"}>\r\n                <h3>Hackers ({hackers.length})</h3>\r\n                <h4 className={\"text-muted\"}>\r\n                    {(application ? application.name : \"\")} - {(event ? event.name : \"\")}\r\n                </h4>\r\n\r\n                <ReactTable\r\n                    showPaginationTop={true}\r\n                    showPaginationBottom={false}\r\n                    data={hackers}\r\n                    columns={[\r\n                        {\r\n                            id: 'fullName',\r\n                            Header: 'Name',\r\n                            accessor: d => d.first_name + \" \" + d.last_name\r\n                        },\r\n                        {\r\n                            Header: 'Email Address',\r\n                            accessor: 'email_address'\r\n                        },\r\n                        {\r\n                            Header: 'School',\r\n                            accessor: 'school'\r\n                        },\r\n                        {\r\n                            id: 'applicationStatus',\r\n                            Header: 'Application Status',\r\n                            accessor: d => {\r\n                                const hackerApplication = pick(d.applications, app => app.application._id === applicationId);\r\n                                if (!hackerApplication) {\r\n                                    return \"Not Started\";\r\n                                } else {\r\n                                    if (hackerApplication.submitted_at) {\r\n                                        return \"Submitted\";\r\n                                    } else {\r\n                                        return \"In progress...\";\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            id: 'actions',\r\n                            Header: 'Actions',\r\n                            accessor: d => {\r\n                                return <Link\r\n                                    to={`/events/${event._id}/applications/${application._id}/hackers/${d._id}`}>View\r\n                                    Application</Link>\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withGlobalContext(HackersScene);","import React, {Component}  from 'react';\r\nimport {withGlobalContext} from \"../contexts/GlobalContext\";\r\nimport {withRouter}        from \"react-router-dom\";\r\nimport {fetchEventList}    from \"../actions/eventActions\";\r\nimport {fetchHackerList}   from \"../actions/hackerActions\";\r\nimport pick                from \"../util/pick\";\r\n\r\nclass HackerApplicationScene extends Component {\r\n\r\n    async componentDidMount() {\r\n        const {reduce} = this.props.globalContext;\r\n        reduce({fetchingEvents: true, fetchingHackers: true});\r\n        reduce(await fetchEventList());\r\n        reduce(await fetchHackerList());\r\n    }\r\n\r\n    render() {\r\n        const {events, hackers}                  = this.props.globalContext;\r\n        const {eventId, applicationId, hackerId} = this.props.match.params;\r\n        const event                              = pick(events, event => event._id === eventId);\r\n        const application                        = pick(event ? event.applications : [], application => application._id === applicationId);\r\n        const hacker                             = pick(hackers, hacker => hacker._id === hackerId);\r\n        const hackerApplication                  = pick(hacker ? hacker.applications : [], app => app.application._id === applicationId);\r\n        return (\r\n            <div className={\"container-fluid pt-3\"}>\r\n                <h3>Hacker Profile / Application</h3>\r\n                <h4 className={\"text-muted\"}>{hacker ? hacker.first_name + \" \" + hacker.last_name : \"\"}</h4>\r\n                <hr/>\r\n                {hacker ? (\r\n                    <React.Fragment>\r\n                        <h5>Profile</h5>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-9\">\r\n                                <table className=\"table\">\r\n                                    <tbody>\r\n                                    <tr>\r\n                                        <th>Full Name</th>\r\n                                        <td>{hacker.first_name} {hacker.last_name}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>Email Address</th>\r\n                                        <td>{hacker.email_address}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>Short Bio</th>\r\n                                        <td>{hacker.description}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>Phone Number</th>\r\n                                        <td>{hacker.phone_number}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>Gender</th>\r\n                                        <td>{hacker.gender}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>Date of Birth</th>\r\n                                        <td>{hacker.dob}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>School</th>\r\n                                        <td>{hacker.school}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>Github</th>\r\n                                        <td>{hacker.github}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>LinkedIn</th>\r\n                                        <td>{hacker.linkedin}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>Personal Website</th>\r\n                                        <td>{hacker.website}</td>\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"col-md-3\">\r\n                                <img\r\n                                    src={`https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=htv-hacker-${hacker._id}`}/>\r\n                                <p className={\"text-muted\"}>{hacker._id}</p>\r\n                            </div>\r\n                        </div>\r\n                        {hackerApplication ? (\r\n                            <React.Fragment>\r\n                                <h5>Application {hackerApplication.submitted_at ? <span className=\"badge badge-success\">Submitted at {hackerApplication.submitted_at}</span>\r\n                                    : <span className=\"badge badge-light\">In progress...</span>}</h5>\r\n                                <div>\r\n                                    {hackerApplication.answers.map(answer => {\r\n                                        return (\r\n                                            <div>\r\n                                                <hr/>\r\n                                                <p><b>{answer.question.name}</b></p>\r\n                                                <small className={\"text-muted\"}>{answer.question.description}</small>\r\n                                                {answer.answers.map(response => {\r\n                                                    return <p>{response}</p>;\r\n                                                })}\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </React.Fragment>\r\n                        ): null}\r\n                    </React.Fragment>\r\n                ) : null}\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(withGlobalContext(HackerApplicationScene));","import React, {Component}                             from 'react';\nimport {withGlobalContext, withGlobalContextProvider} from \"./contexts/GlobalContext\";\nimport {Route, Switch, withRouter}                    from \"react-router-dom\";\nimport LoginScene                                     from \"./scenes/Login\";\nimport EventsScene                                    from \"./scenes/Events\";\nimport ApplicationsScene                              from \"./scenes/Applications\";\nimport HackersScene                                   from \"./scenes/Hackers\";\nimport HackerApplicationScene                         from \"./scenes/HackerApplication\";\nimport {rehydrateSession}                             from \"./actions/loginActions\";\n\nclass App extends Component {\n\n    async componentDidMount() {\n        const {reduce} = this.props.globalContext;\n        let result     = await rehydrateSession();\n        reduce(result);\n        if (!result.authenticated) this.props.history.push('/');\n    }\n\n    render() {\n\n        const {fetchingEvents, fetchingHackers} = this.props.globalContext;\n\n        return (\n            <React.Fragment>\n                <div className=\"container-fluid\">\n                {fetchingEvents ? <p>Fetching events...</p>: null}\n                {fetchingHackers ? <p>Fetching hackers... this can take a while...</p>: null}\n                </div>\n                <Switch>\n                    <Route exact path='/' component={LoginScene}/>\n                    <Route exact path='/events' component={EventsScene}/>\n                    <Route exact path='/events/:eventId/applications' component={ApplicationsScene}/>\n                    <Route exact path='/events/:eventId/applications/:applicationId/hackers' component={HackersScene}/>\n                    <Route exact path='/events/:eventId/applications/:applicationId/hackers/:hackerId'\n                           component={HackerApplicationScene}/>\n                </Switch>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withRouter(withGlobalContextProvider(withGlobalContext(App)));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React              from 'react';\nimport ReactDOM           from 'react-dom';\nimport App                from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter}       from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-table/react-table.css';\nimport {rehydrateSession} from \"./actions/loginActions\";\n\nrehydrateSession();\n\nReactDOM.render((\n    <HashRouter>\n        <App/>\n    </HashRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}